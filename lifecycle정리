React vs Vue.js LifeCycle 비교

1. React LifeCycle (v16.8 이후)

- 라이프 사이클 접두사
* Will 접두사 => 어떤 작업을 작동하기 전에 실행되는 메서드
* Did 접두사 => 어떤 작업을 작동 후에 실행되는 메서드

- 라이프 사이클 카테고리 3가지
마운트(생성), 업데이트(변경), 언마운트(제거)

1) 마운트(Mount)
* DOM이 생성되고 웹 브라우저상에 나타나는 것을 마운트라고 한다.

* 마운트의 종류(위부터 아래로 메서드 호출 순서)

* constructor() : 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드이다.
* static getDerivedStateFromProps() : props에 있는 값을 state에 넣을 때 사용하는 메서드이다.
* render() : UI를 렌더링하는 메서드이다.
* compoentDidMount() : 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드이다.


2) 업데이트(Update)
* 컴포넌트 업데이트 조건 4가지
2-1) props가 바뀔 때
2-2) state가 바뀔 때
2-3) 부모 컴포넌트가 리렌더링될 때
2-4) this.forceUpdate로 강제로 렌더링을 트리거할 때

* 업데이트의 종류 (위로부터 호출순서)

* getDerivedStateFromProps() : 마운트 과정에서도 호출되며 업데이트가 시작하기 전에 호출된다. props의 변화에 따라 state 값에도 변화를 주고 싶을 때 사용한다.
* shouldComponentUpdate() : 컴포넌트가 리렌더링을 할지 말지 결정하는 메서드이다. 리턴 값은 true 와 false 이다. this.forceUpdate() 함수를 호출한다면 이 과정을 생략하고 render 함수를 호출한다.
* render() : 컴포넌트를 리렌더링 한다.
* getSnapshotBeforeUpdate() : 컴포넌트 변화를 DOM에 반영하기 바로 직전에 호출하는 메서드이다.
* componentDidUpdate() : 컴포넌트의 업데이트 작업이 끝난 후 호출하는 메서드이다.


3) 언마운트(Unmount)
* 마운트의 반대과정이며 컴포넌트를 DOM에서 제거하는 것을 언마운트라고 한다.

* 언마운트 종류

* componentWillUnmount() : 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드이다.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Vue.js LifeCycle

1) Create
Vue.js의 라이프 사이클 중에 가장 먼저 실행된다.
컴포넌트가 DOM에 추가되기 전이며, DOM에 접근하거나 this.$el을 사용할 수 없다.

1-1) beforeCreate
data와 이벤트($on, $once, $off, $emit), 감시자($watch)등이 설정 되기 전에 호출되는 라이프 사이클 훅이다.

1-2) created
data, computed, methods, watch 등과 같은 옵션 설정이 완료된 시점이기 때문에, data 등을 사용할 수 있다. 
하지만 아직 DOM에 컴포넌트가 마운트 되지 않았기 때문에 $el은 사용할 수 없다.


2) Mount
컴포넌트가 DOM에 추가될 때, 실행되는 라이프 사이클 훅이다.
렌더링이 될 때 DOM을 변경하고 싶다면 이 라이프 사이클 훅을 사용할 수 있다. 
하지만 컴포넌트 초기에 data가 세팅되어야 한다면, created 라이프 사이클 훅을 사용하는 것이 좋다.

2-1) beforeMount
컴포넌트가 DOM에 추가되기 직전에 실행되는 훅이다.
컴포넌트 초기에 data가 세팅되어하 한다면 created 라이프 사이클 훅을, 렌더링이 되고 DOM을 변경해야 한다면 mounted 라이프 사이클 훅을 사용하면 되기 때문에 거의 사용되지 않는다.

2-2) mounted
컴포넌트가 DOM에 추가 된 후 호출되는 라이프 사이클 훅이다. 
서버 사이드 렌더링은 지원하지 않는다. 
$el을 사용하여 DOM에 접근 할 수 있다.
mounted 훅이 호출되었다고 모든 컴포넌트가 마운트 되었다고 보장할 수는 없다.
(자식 컴포넌트의 mounted 훅이 부모 컴포넌트의 mounted 훅 보다 먼저 실행된다.)


3) Update
컴포넌트가 재 렌더링 되면 실행되는 라이프 사이클 훅이다.
컴포넌트가 재 렌더링 될 때, 변경 된 값으로 어떠한 작업을 해야 할 때 유용하게 사용되는 훅이다.

3-1) beforeUpdate
DOM이 재 렌더링 되기 직전에 호출되는 라이프 사이클 훅이다.
업데이트 된 값을 가지고 있는 상태이기 때문에, 업데이트 된 값으로 다른 값들을 업데이트 할 수 있다.
이 훅에서 값이 변경되더라도 다시 beforeUpdate 훅이 호출되지 않기 때문에, 무한루프에 빠질 걱정은 하지 않아도 된다.

3-2) updated
DOM이 재 렌더링 된 후 호출되는 라이프 사이클 훅이다.
DOM이 업데이트 된 후 호출되는 훅이기 때문에 변경 된 후의 DOM을 이용해야 하는 처리를 할 때 사용하기 유용한 훅이다.
beforeUpdate 훅과 다르게 updated 훅에서 data 를 수정하게 되면 update 훅이 호출되기 때문에 무한루프에 빠질 수 있으니 유의해야 된다.


4)  Destroy
컴포넌트가 제거 될 때 실행되는 라이프 사이클 훅이다.

4-1) beforeDestroy
컴포넌트가 제거 되기 직전에 호출되는 라이프 사이클 훅이다.
이 훅에서 컴포넌트는 본래의 기능들을 가지고 있는 온전한 상태이다.
이 훅에서 이벤트 리스너를 해제하거나 컴포넌트에서 동작으로 할당 받은 자원들은 해제해야 할 때 사용하기 적합한 훅이다.

4-2) destroyed
컴포넌트가 제거 된 후 호출되는 라이프 사이클 훅이다.
컴포넌트의 모든 이벤트 리스너(@click...)와 디렉티브(v-model, v-show...)의 바인딩이 해제되고, 하위 컴포넌트도 모두 제거된다.




